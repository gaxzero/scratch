/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 06 06:39:26 GMT 2016
 */

package org.collegeboard.challenge.guessnum.straregy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.collegeboard.challenge.guessnum.Ui;
import org.collegeboard.challenge.guessnum.straregy.Basic;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Basic_ESTest extends Basic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic basic0 = new Basic();
      basic0.setPivot((BigDecimal) null);
      BigDecimal bigDecimal0 = basic0.getPivot();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = Basic.FOUR;
      basic0.setPivot(bigDecimal0);
      BigDecimal bigDecimal1 = basic0.getPivot();
      assertEquals(4, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.lower;
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      BigDecimal bigDecimal1 = basic0.getPivot();
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(-1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.higher;
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      assertEquals(1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = basic0.getLo();
      assertEquals(0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = Basic.TWO;
      basic0.setJump(bigDecimal0);
      BigDecimal bigDecimal1 = basic0.getJump();
      assertEquals(2, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.lower;
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      assertEquals(-1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = basic0.getHi();
      assertEquals(0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = Basic.SEVEN;
      basic0.setHi(bigDecimal0);
      BigDecimal bigDecimal1 = basic0.getHi();
      assertEquals(7, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic basic0 = new Basic();
      basic0.setPivot((BigDecimal) null);
      // Undeclared exception!
      try { 
        basic0.getPrompt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.collegeboard.challenge.guessnum.straregy.Basic", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.higher;
      BigDecimal bigDecimal0 = ui_Choice0.dir;
      basic0.setHi(bigDecimal0);
      // Undeclared exception!
      try { 
        basic0.advance(ui_Choice0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.collegeboard.challenge.guessnum.straregy.Basic", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.lower;
      basic0.advance(ui_Choice0);
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      assertEquals(-3, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = basic0.getHi();
      assertEquals(-1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.yes;
      // Undeclared exception!
      try { 
        basic0.advance(ui_Choice0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // yes
         //
         assertThrownBy("org.collegeboard.challenge.guessnum.straregy.Basic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.lower;
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      Ui.Choice ui_Choice1 = Ui.Choice.higher;
      BigDecimal bigDecimal1 = basic0.advance(ui_Choice1);
      assertEquals(0, bigDecimal1.shortValue());
      
      BigDecimal bigDecimal2 = basic0.getLo();
      assertSame(bigDecimal2, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = basic0.getJump();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = basic0.getPivot();
      basic0.setJump(bigDecimal0);
      BigDecimal bigDecimal1 = basic0.getJump();
      assertEquals(0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = basic0.getLo();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.lower;
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      basic0.setJump(bigDecimal0);
      BigDecimal bigDecimal1 = basic0.getJump();
      assertEquals(-1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic basic0 = new Basic();
      String string0 = basic0.getPrompt();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic basic0 = new Basic();
      Ui.Choice ui_Choice0 = Ui.Choice.higher;
      BigDecimal bigDecimal0 = basic0.advance(ui_Choice0);
      basic0.setLo(bigDecimal0);
      BigDecimal bigDecimal1 = basic0.getLo();
      assertEquals(1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic basic0 = new Basic();
      BigDecimal bigDecimal0 = basic0.getHi();
      assertNull(bigDecimal0);
  }
}
